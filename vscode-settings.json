{
  "terminal.external.osxExec": "iTerm.app",
  "editor.fontSize": 14,
  "editor.cursorBlinking": "solid",
  "editor.fontFamily": "FiraCode-Retina",
  "editor.fontLigatures": true,
  "editor.lineNumbers": "relative",
  "diffEditor.renderSideBySide": false,
  "files.trimTrailingWhitespace": true,
  "workbench.editor.enablePreview": false,
  "currentFilePath.defaultPathStartsFrom": "workSpace",
  "search.smartCase": true,
  "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,
  "scm.diffDecorationsGutterWidth": 2,
  "window.restoreFullscreen": true,
  "window.zoomLevel": 2,
  "files.hotExit": "off",
  // It's cooler to delete this line after the issue fixed.
  // https://github.com/Microsoft/vscode/issues/54175
  // "zenMode.centerLayout": false,
  "editor.quickSuggestions": {
    "other": true,
    "comments": true,
    "strings": true
  },
  "go.inferGopath": true,
  "go.useLanguageServer": true,
  "[go]": {
    "editor.snippetSuggestions": "none",
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
      "source.organizeImports": "explicit"
    }
  },
  "go.alternateTools": {
    "go": "/usr/local/bin/go"
  },
  "go.lintTool": "revive",
  "gopls": {
    "linkTarget": "",
    "usePlaceholders": false, // add parameter placeholders when completing a function
    // Experimental settings
    "formatting.gofumpt": true,
    "completeUnimported": true, // autocomplete unimported packages
    "deepCompletion": true, // enable deep completion
  },
  "go.toolsEnvVars": {
    // "GOPROXY": "https://goproxy.cn,direct",
  },
  "terminal.integrated.env.linux": {
    // "GOPROXY": "https://goproxy.cn,direct",
  },
  "[racket]": {
    "editor.rulers": [],
    // some further Racket-specific configuration
  },
  "files.eol": "\n", // formatting only supports LF line endings
  "vim.enableNeovim": true,
  "vim.cursorStylePerMode.insert": "line",
  "vim.sneak": false,
  "vim.incsearch": true,
  "vim.useSystemClipboard": false,
  "vim.useCtrlKeys": true,
  "vim.hlsearch": true,
  "vim.easymotionMarkerBackgroundColor": "#000000",
  "vim.easymotionMarkerForegroundColorOneChar": "#ea0e0e",
  // "vim.easymotionMarkerForegroundColorTwoChar": "#ea0e0e",
  // "vim.easymotionMarkerFontFamily": "Menlo, Monaco, 'Courier New', monospace",
  "vim.easymotionMarkerFontWeight": "bold",
  "vim.easymotionKeys": "hklyuiopnm,qwertzxcvbasdgjf",
  "vim.leader": "<space>",
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      "before": [
        "H"
      ],
      "after": [
        "^"
      ],
    },
    {
      "before": [
        "L"
      ],
      "after": [
        "$"
      ],
    },
    {
      "before": [
        "U"
      ],
      "after": [
        "<C-r>"
      ],
    },
    {
      "before": [
        "m"
      ],
      "after": [
        "%"
      ],
    },
    {
      "before": [
        "<leader>",
        "h"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "h"
      ],
    },
    {
      "before": [
        "<leader>",
        "l"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "l"
      ],
    },
    {
      "before": [
        "<leader>",
        "j"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "j"
      ],
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "j"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "<leader>",
        "j"
      ],
    },
    {
      "before": [
        "<leader>",
        "k"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "k"
      ],
    },
    {
      "before": [
        "<C-h>"
      ],
      "after": [
        "C-w",
        "h"
      ],
    },
    {
      "before": [
        "<C-l>"
      ],
      "after": [
        "C-w",
        "l"
      ],
    },
    {
      "before": [
        "<C-j>"
      ],
      "after": [
        "C-w",
        "j"
      ],
    },
    {
      "before": [
        "<C-k>"
      ],
      "after": [
        "C-w",
        "k"
      ],
    },
    {
      "before": [
        "Y"
      ],
      "after": [
        "y",
        "$"
      ],
    },
    {
      "before": [
        "<leader>",
        "w"
      ],
      "commands": [
        ":w"
      ],
    },
    {
      "before": [
        "Z",
        "Z"
      ],
      "commands": [
        ":wq"
      ]
    },
    {
      "before": [
        "<leader>",
        "q"
      ],
      "commands": [
        ":q"
      ],
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "q"
      ],
      "commands": [
        ":q!"
      ],
    },
    {
      "before": [
        "<leader>",
        "n"
      ],
      "commands": [
        ":nohl"
      ]
    },
    {
      "before": [
        "<leader>",
        "f"
      ],
      "commands": [
        "workbench.action.quickOpen"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "f"
      ],
      "commands": [
        "editor.action.formatDocument"
      ]
    },
    {
      "before": [
        "<leader>",
        "c"
      ],
      "commands": [
        "workbench.action.showCommands"
      ]
    },
    {
      "before": [
        "<leader>",
        "d"
      ],
      "commands": [
        "editor.action.goToDeclaration"
      ]
    },
    {
      "before": [
        "<leader>",
        "v"
      ],
      "commands": [
        "editor.action.revealDefinitionAside"
      ]
    },
    {
      "before": [
        "<leader>",
        "b",
      ],
      "commands": [
        "editor.action.openDeclarationToTheSide"
      ]
    },
    {
      "before": [
        "<leader>",
        "s"
      ],
      "commands": [
        "editor.action.showHover"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "s"
      ],
      "commands": [
        "editor.action.previewDeclaration"
      ]
    },
    {
      "before": [
        "<leader>",
        "r",
      ],
      "commands": [
        "editor.action.referenceSearch.trigger"
      ]
    },
    {
      "before": [
        "<leader>",
        "z"
      ],
      "commands": [
        "workbench.action.toggleZenMode"
      ]
    },
    {
      "before": [
        "<leader>",
        "e"
      ],
      "commands": [
        "code-runner.run",
      ]
    },
    {
      "before": [
        "<leader>",
        "g"
      ],
      "commands": [
        "workbench.action.gotoSymbol"
      ],
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "g"
      ],
      "commands": [
        "workbench.action.showAllSymbols"
      ]
    },
    {
      "before": [
        "<leader>",
        "x"
      ],
      "commands": [
        "editor.action.rename"
      ],
    },
    {
      "before": [
        "`",
        "`"
      ],
      "commands": [
        "workbench.action.navigateBack"
      ],
    },
    {
      "before": [
        "<leader>",
        "`"
      ],
      "commands": [
        "workbench.action.navigateForward"
      ],
    },
  ],
  "vim.visualModeKeyBindings": [
    {
      "before": [
        "<leader>",
        "<leader>",
        "c"
      ],
      "commands": [
        "editor.action.commentLine"
      ]
    },
  ],
  "vim.neovimPath": "/opt/homebrew/bin/nvim",
  "zenMode.hideLineNumbers": false,
  "editor.cursorSmoothCaretAnimation": "on",
  "go.autocompleteUnimportedPackages": true,
  "editor.hideCursorInOverviewRuler": true,
  "terminal.integrated.scrollback": 1000000,
  "editor.parameterHints.cycle": true,
  "editor.parameterHints.enabled": false,
  "diffEditor.ignoreTrimWhitespace": false,
  "files.exclude": {
    "**/*.a": true,
    "**/.classpath": true,
    "**/.project": true,
    "**/.settings": true,
    "**/.factorypath": true
  },
  "workbench.iconTheme": "material-icon-theme",
  "powermode.enableStatusBarComboTimer": false,
  "powermode.presets": "flames",
  "workbench.colorTheme": "Tomorrow Night Bright",
  "workbench.fontAliasing": "auto",
  "editor.minimap.enabled": false,
  "editor.cursorSurroundingLines": 7,
  "editor.suggestSelection": "first",
  "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
  "editor.formatOnSave": true,
  "workbench.startupEditor": "newUntitledFile",
  "java.debug.settings.hotCodeReplace": "auto",
  "boot-java.scan-java-test-sources.on": true,
  "terminal.explorerKind": "external",
  "security.workspace.trust.untrustedFiles": "open",
  "terminal.integrated.fontFamily": "Menlo",
  "go.toolsManagement.autoUpdate": true,
  "redhat.telemetry.enabled": true,
  "java.jdt.ls.vmargs": "-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m -javaagent:\"/Users/longyun/.vscode/extensions/gabrielbb.vscode-lombok-1.0.1/server/lombok.jar\"",
  "powermode.combo.location": "statusbar",
  "powermode.combo.counterEnabled": "hide",
  "powermode.combo.timerEnabled": "hide",
  "powermode.shake.enabled": false,
  "output.smartScroll.enabled": false,
  "code-runner.clearPreviousOutput": true,
  "code-runner.saveAllFilesBeforeRun": true,
  "code-runner.runInTerminal": true,
  "go.testFlags": [
    "-v"
  ],
  "editor.inlineSuggest.enabled": true,
  "editor.find.seedSearchStringFromSelection": "never",
  "github.copilot.enable": {
    "*": true,
    "plaintext": true,
    "markdown": true,
    "scminput": false,
    "yaml": true,
    "racket": false
  },
  "files.restoreUndoStack": false,
  "[python]": {
    "editor.formatOnType": true
  },
  "go.addTags": {
    "transform": "camelcase"
  },
  "go.languageServerFlags": [],
  "http.proxy": "http://127.0.0.1:7890",
  "http.proxyAuthorization": null,
  "github.copilot.advanced": {},
  "vs-kubernetes": {
    "vscode-kubernetes.helm-path.mac": "/Users/longyun/.vs-kubernetes/tools/helm/darwin-arm64/helm",
    "vscode-kubernetes.minikube-path.mac": "/Users/longyun/.vs-kubernetes/tools/minikube/darwin-arm64/minikube",
    "vscode-kubernetes.helm-path-linux": "/home/ubuntu/.local/state/vs-kubernetes/tools/helm/linux-amd64/helm",
    "vscode-kubernetes.kubectl-path-linux": "/home/ubuntu/.local/state/vs-kubernetes/tools/kubectl/kubectl",
    "vscode-kubernetes.minikube-path-linux": "/home/ubuntu/.local/state/vs-kubernetes/tools/minikube/linux-amd64/minikube"
  },
  "gitlens.currentLine.enabled": false,
  "settingsSync.ignoredSettings": [],
  "editor.accessibilitySupport": "off",
}
